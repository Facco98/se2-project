swagger: '2.0'
info:
  version: '1.0'
  title: "nestareas"
  description: A simple way to manage the common areas within NEST - Nuovo Studentato Trento
  license:
    name: MIT
    url: https://github.com/Facco/se2-proj
host: nestareas.herokuapp.com
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /login/{mail}:
    get:
      summary: Login
      description: Authenticates the user.
      parameters:
        - in: path
          name: mail
          required: true
          type: string
          minimum: 1
          description: The mail of the user you want to authenticate.
        - in: query
          name: password
          required: true
          type: string
          minimum: 1
          description: The password of the user you want to authenticate.
      responses:
        200:
          description: Successfull response
          schema:
            type: object
            properties:
              logged:
                type: boolean
                description: The authentication was successfull or not.
              authToken:
                type: string
                description: The authentication token generated by the server.
            example:
              logged: true
              authToken: 'MySecretAuthToken'
        409:
          description: An error occurred
          schema:
            type: object
            properties:
              logged:
                type: boolean
                description: The authentication was successfull or not.
              errorDescription:
                type: string
                description: The description of the error occurred.
            example:
              logged: false
              errorDescription: 'Wrong username / password combination'
  /request/:
    get:
      summary: List requests
      description: The list of all the pending requests (not yet approved). Only staff members are allowed to see the list of requests
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Tells you if the request was valid or not.
              request:
                type: array
                items:
                  $ref: '#/definitions/Request'
                description: The list of the pending request.
            example:
              valid: true
              requests:
                - id: 1
                  id_utente: 2
                  motivazione: 'Tutorato matematica'
                  inizio: '2019-12-19 12:00'
                  durata: { 'hours': '2' }
        401:
          description: An error occured
          schema:
            type: object
            properties:
              logged:
                type: boolean
                description: The user is not allowed to see the list, which means the user is not a staff member.
              errorDescription:
                type: string
                description: The description of the error occurred.
            example:
              logged: false
              errorDescription: 'The token supplied is not valid.'
    post:
      summary: Submit a request
      description: Creating a Request
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Request'
      responses:
        200:
          description: Successfull response.
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Tells you if the request was accepted or not.
            example:
              valid: true
        400:
          description: There was a problem with your request
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Tells you if the request was accepted or not.
              errorDescription:
                type: string
                description: Tells you the error occurred
            example:
              valid: false
              errorDescription: There was an overlap with another reservation.
        401:
          description: Unauthorized access.
          schema:
            type: object
            properties:
              logged:
                type: boolean
                description: The user is not allowed to do this
              errorDescription:
                type: string
                description: The description of the error occurred.
            example:
              valid: false
              errorDescription: 'The token supplied is not valid.'


  /reservation/{id}:
    get:
      summary: View reservation.
      description: View a specific reservation of a room.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          minimum: 1
          description: The id of the reservation you want to view.
      responses:
        200:
          description: Successful response.
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Tells you if you can view the details of the reservation
              motivazione:
                type: string
                description: Tells you the reason why the room was reserved.
              inizio:
                type: string
                description: The beginning of the reservation
              durata:
                type: string
                description: The lapse of the reservation.
            example:
              valid: true
              motivazione: 'Tutorato matematica'
              inizio: '2019-12-10 12:00'
              durata: { 'hours': '2' }
        400:
          description: Bad request.
          schema:
            type: object
            properties:
                valid:
                  type: boolean
                  description: Tells you if you can view the details of the reservation.
                error:
                  type: string
                  description: The description of the error occurred.
            example:
              valid: false
              errorDescription: 'Could not find the id supplied'
    delete:
      summary: Delete reservation
      description: Deletes the reservation. Users can delete their own reservations, staff can delete any reservation.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          minimum: 1
          description: The id of the reservation you want to delete.
      responses:
        200:
          description: Successful response. The user was able to delete his reservation
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Tells you if the reservation was deleted correctly.
            example:
              valid: true
        401:
          description: Unauthorized access.
          schema:
            type: object
            properties:
                valid:
                  type: boolean
                  description: Tells you if the request was valid or not.
                error:
                  type: string
                  description: The description of the error occurred.
            example:
              valid: false
              error: 'The token supplied is not valid.'
        404:
          description: An error occurred.
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Tells you if the request was valid or not.
              errorDescription:
                type: string
                description: The description of the error occurred.
            example:
              valid: false
              errorDescription: 'We could not find the specified id.'

  /reservation/room/{id_aula}:
    get:
      summary: List Reservations
      description: Returns the list of all the reservation for a room.
      parameters:
        - in: path
          name: id_aula
          required: true
          type: integer
          minimum: 1
          description: The id of the room you want to see the list of reservation.
        - in: query
          name: inizio
          required: true
          type: string
          minimum: 1
          description: The beginning of the interval
        - in: query
          name: durata
          required: true
          type: string
          minimum: 1
          description: The lapse of the interval.
      responses:
        200:
          description: Successful response.
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Tells you if the request was valid or not.
              list:
                type: array
                items:
                    $ref: '#/definitions/Reservation'
                description: Tells you the reservations currently registered and accepted.
            example:
              valid: true
              list:
                - motivazione: 'Tutorato matematica'
                  inizio: '2019-12-10 12:00'
                  durata: { 'hours': '2' }
                - motivazione: 'Tutorato economia'
                  inizio: '2019-10-10 14:00'
                  durata: { 'hours': '3' }
        404:
          description: An error occurred.
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Tells you if the request was valid or not.
              errorDescription:
                type: string
                description: The description of the error occurred.
            example:
              valid: false
              errorDescription: 'Could not find the id specified'
definitions:
  Request:
    type: object
    properties:
      id:
        type: integer
        description: Id of the request.
      id_utente:
        type: integer
        description: The ID of the user who made the request
      motivazione:
        type: string
        description: The reason why the user requested the room
      inizio:
        type: string
        description: The timestamp when the request begins
      durata:
        type: object
        description: Tells you for how much time the user wants the room.

  Reservation:
    type: object
    properties:
      motivazione:
        type: string
        description: The reason why the room was reserved.
      inizio:
        type: string
        description: Timestamp wich indicates the beginning of the reservation.
      durata:
        type: object
        description: Tells you how long the room is reserved for.
